# Generated by Django 5.0.3 on 2024-03-18 06:19

import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="FakeModel",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("unannotated_json_field", models.JSONField()),
                ("user", models.JSONField()),
                ("names_to_users", models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user", models.JSONField()),
                ("user_dump", models.JSONField()),
                ("amount", models.JSONField()),
                ("items", models.JSONField()),
                ("prices", models.JSONField()),
                ("nullable_prices", models.JSONField()),
            ],
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="fakemodel",
            trigger=pgtrigger.compiler.Trigger(
                name="validate_json_fields",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            IF NOT validate_json(NEW."user", \'{"description": "Pydantic model for testing the JSONField validation.", "properties": {"username": {"title": "Username", "type": "string"}, "email": {"title": "Email", "type": "string"}}, "required": ["username", "email"], "title": "User", "type": "object"}\'::json) THEN\n                RAISE EXCEPTION \'The JSON field % must match the schema % but does not.\', \'user\', \'{"description": "Pydantic model for testing the JSONField validation.", "properties": {"username": {"title": "Username", "type": "string"}, "email": {"title": "Email", "type": "string"}}, "required": ["username", "email"], "title": "User", "type": "object"}\';\n            END IF;\n        \n            IF NOT validate_json(NEW."names_to_users", \'{"$defs": {"User": {"description": "Pydantic model for testing the JSONField validation.", "properties": {"username": {"title": "Username", "type": "string"}, "email": {"title": "Email", "type": "string"}}, "required": ["username", "email"], "title": "User", "type": "object"}}, "additionalProperties": {"$ref": "#/$defs/User"}, "title": "UsersRoot", "type": "object"}\'::json) THEN\n                RAISE EXCEPTION \'The JSON field % must match the schema % but does not.\', \'names_to_users\', \'{"$defs": {"User": {"description": "Pydantic model for testing the JSONField validation.", "properties": {"username": {"title": "Username", "type": "string"}, "email": {"title": "Email", "type": "string"}}, "required": ["username", "email"], "title": "User", "type": "object"}}, "additionalProperties": {"$ref": "#/$defs/User"}, "title": "UsersRoot", "type": "object"}\';\n            END IF;\n        RETURN NEW;',
                    hash="169a829cc204661de1194738dc9a5f36e2a99000",
                    operation="INSERT OR UPDATE",
                    pgid="pgtrigger_validate_json_fields_3fe91",
                    table="tests_fakemodel",
                    when="BEFORE",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="payment",
            trigger=pgtrigger.compiler.Trigger(
                name="validate_json_fields",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            IF NOT validate_json(NEW."user", \'{"additionalProperties": {"type": "string"}, "type": "object"}\'::json) THEN\n                RAISE EXCEPTION \'The JSON field % must match the schema % but does not.\', \'user\', \'{"additionalProperties": {"type": "string"}, "type": "object"}\';\n            END IF;\n        \n            IF NOT validate_json(NEW."user_dump", \'{"type": "string"}\'::json) THEN\n                RAISE EXCEPTION \'The JSON field % must match the schema % but does not.\', \'user_dump\', \'{"type": "string"}\';\n            END IF;\n        \n            IF NOT validate_json(NEW."amount", \'{"anyOf": [{"type": "number"}, {"type": "null"}]}\'::json) THEN\n                RAISE EXCEPTION \'The JSON field % must match the schema % but does not.\', \'amount\', \'{"anyOf": [{"type": "number"}, {"type": "null"}]}\';\n            END IF;\n        \n            IF NOT validate_json(NEW."items", \'{"items": {"type": "string"}, "type": "array"}\'::json) THEN\n                RAISE EXCEPTION \'The JSON field % must match the schema % but does not.\', \'items\', \'{"items": {"type": "string"}, "type": "array"}\';\n            END IF;\n        \n            IF NOT validate_json(NEW."prices", \'{"items": {"type": "number"}, "type": "array"}\'::json) THEN\n                RAISE EXCEPTION \'The JSON field % must match the schema % but does not.\', \'prices\', \'{"items": {"type": "number"}, "type": "array"}\';\n            END IF;\n        \n            IF NOT validate_json(NEW."nullable_prices", \'{"items": {"anyOf": [{"type": "number"}, {"type": "null"}]}, "type": "array"}\'::json) THEN\n                RAISE EXCEPTION \'The JSON field % must match the schema % but does not.\', \'nullable_prices\', \'{"items": {"anyOf": [{"type": "number"}, {"type": "null"}]}, "type": "array"}\';\n            END IF;\n        RETURN NEW;',
                    hash="d893630ad4f4fae6581a299ad71a9a38bf0c89fa",
                    operation="INSERT OR UPDATE",
                    pgid="pgtrigger_validate_json_fields_3dff9",
                    table="tests_payment",
                    when="BEFORE",
                ),
            ),
        ),
    ]
